export declare function removeSortedDuplicates<T>(arr: T[]): T[];
export declare function removeUnsortedDuplicates<T>(arr: T[]): T[];
export declare function flattenArray<T>(arr: T[], depth?: number): FlatArray<T, 0 | 2 | 1 | 3 | 4 | 8 | 16 | 5 | 6 | 10 | 7 | 12 | 11 | 14 | 9 | 13 | 15 | 17 | 18 | 19 | 20 | -1>[];
export declare function chunk<T>(arr: T[], size: number): T[][];
export declare function differences<T>(arr1: T[], arr2: T[]): T[];
export declare function intersection<T>(arr1: T[], arr2: T[]): T[];
export declare function union<T>(arr1: T[], arr2: T[]): T[];
export declare function combineElementWise(arr1: number[], arr2: number[]): number[];
export declare function unzip<T, U>(arr: [T, U][]): [T[], U[]];
export declare function partitionByCondition<T>(arr: T[], predicate: (value: T) => boolean): [T[], T[]];
export declare function sortBy<T>(arr: T[], key: keyof T, order?: 'asc' | 'desc'): T[];
export declare function countOccurencesArr<T>(arr: T[], char: T): number;
export declare function removeFalsy<T>(arr: T[]): T[];
export declare function move<T>(arr: T[], from: number, to: number): T[];
export declare function reverseShallow<T>(arr: T[]): T[];
export declare function reverseDeep<T>(arr: T[]): T[];
export declare function reverseRange<T>(arr: T[], start: number, end: number): T[];
export declare function reverseWithCondition<T>(arr: T[], condition: (value: T, index: number) => boolean): T[];
export declare function rotate<T>(arr: T[], k: number): T[];
export declare function pluck<T, K extends keyof T>(arr: T[], key: K): T[K][];
export declare function fullyFlatten<T>(arr: T[]): T[];
export declare function getFirst<T>(arr: T[], k?: number): T[];
export declare function getLast<T>(arr: T[], k?: number): T[];
export declare const compact: typeof removeFalsy;
export declare function arrayToObjects<T>(arr: [string, T][]): Record<string, T>;
export declare function objectToArray<T>(obj: Record<string, T>): [string, T][];
export declare function range(start: number, end: number, step?: number): number[];
export declare function sumArray<T extends number>(arr: T[]): number;
export declare function getAverage<T extends number>(arr: T[]): number;
export declare function getMedian<T extends number>(arr: T[]): number;
export declare function getMode<T extends number>(arr: T[]): number[];
export declare function isSorted<T extends number>(arr: T[], order?: 'asc' | 'desc'): boolean;
export declare function getNthElements<T>(arr: T[], n: number): T[];
export declare function findDuplicates<T>(arr: T[]): T[];
export declare function removeObjectDuplicates<T>(arr: T[], key: keyof T): T[];
